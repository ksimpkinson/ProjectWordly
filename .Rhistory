amazon <- read.delim("amazon_cells_labelled.txt", header=FALSE)
imdb <- read.delim("imdb_labelled.txt", header=FALSE)
yelp <- read.delim("yelp_labelled.txt", header=FALSE)
View(amazon)
View(imdb)
View(yelp)
library(tidyverse)
review_data <- bind_rows(amazon, imdb, yelp)
View(review_data)
review_data1 <- review_data %>%
select(V1)
View(review_data1)
review_data1 <- review_data %>%
select(V1) %>%
mutate(V1 = str_replace_all(V1, ".", " "))
review_data1 <- review_data %>%
select(V1) %>%
mutate(V1 = str_replace_all(V1, "\\.", " "))
review_data1 <- review_data %>%
select(V1) %>%
separate(V1, into = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
"11", "12", "13", "14", "15", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26",
"27", "28", "29", "30", "31", "32", "33", "34",
"35", "36", "37", "38", "39", "40", "41", "42",
"43", "44", "45", "46", "47", "48", "49", "50"), sep = " ", extra = "drop") %>%
mutate(V1 = str_replace_all(V1, "\\.", " "))
review_data1 <- review_data %>%
select(V1)
review_data2 <- review_1 %>%
separate(V1, into = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
"11", "12", "13", "14", "15", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26",
"27", "28", "29", "30", "31", "32", "33", "34",
"35", "36", "37", "38", "39", "40", "41", "42",
"43", "44", "45", "46", "47", "48", "49", "50"), sep = " ", extra = "drop") %>%
mutate(V1 = str_replace_all(V1, "\\.", " "))
review_data2 <- review_data1 %>%
separate(V1, into = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
"11", "12", "13", "14", "15", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26",
"27", "28", "29", "30", "31", "32", "33", "34",
"35", "36", "37", "38", "39", "40", "41", "42",
"43", "44", "45", "46", "47", "48", "49", "50"), sep = " ", extra = "drop") %>%
mutate(V1 = str_replace_all(V1, "\\.", " "))
review_data1 <- review_data %>%
select(V1) %>%
separate(review_data$V1, into = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
"11", "12", "13", "14", "15", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26",
"27", "28", "29", "30", "31", "32", "33", "34",
"35", "36", "37", "38", "39", "40", "41", "42",
"43", "44", "45", "46", "47", "48", "49", "50"), sep = " ", extra = "drop") %>%
mutate(V1 = str_replace_all(V1, "\\.", " "))
review_data1 <- review_data %>%
select(V1) %>%
separate(V1, into = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
"11", "12", "13", "14", "15", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26",
"27", "28", "29", "30", "31", "32", "33", "34",
"35", "36", "37", "38", "39", "40", "41", "42",
"43", "44", "45", "46", "47", "48", "49", "50"), sep = " ", extra = "drop") %>%
mutate(V1 = str_replace_all(V1, "\\.", " "))
review_data1 <- review_data %>%
select(V1) %>%
separate(into = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
"11", "12", "13", "14", "15", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26",
"27", "28", "29", "30", "31", "32", "33", "34",
"35", "36", "37", "38", "39", "40", "41", "42",
"43", "44", "45", "46", "47", "48", "49", "50"), sep = " ", extra = "drop") %>%
mutate(V1 = str_replace_all(V1, "\\.", " "))
review_data1 <- review_data %>%
select(V1) %>%
separate(`V1`, into = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
"11", "12", "13", "14", "15", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26",
"27", "28", "29", "30", "31", "32", "33", "34",
"35", "36", "37", "38", "39", "40", "41", "42",
"43", "44", "45", "46", "47", "48", "49", "50"), sep = " ", extra = "drop") %>%
mutate(V1 = str_replace_all(V1, "\\.", " "))
review_data1 <- review_data %>%
select(V1) %>%
separate(review_data$V1, into = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
"11", "12", "13", "14", "15", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26",
"27", "28", "29", "30", "31", "32", "33", "34",
"35", "36", "37", "38", "39", "40", "41", "42",
"43", "44", "45", "46", "47", "48", "49", "50"), sep = " ", extra = "drop") %>%
mutate(V1 = str_replace_all(V1, "\\.", " "))
review_data1 <- review_data %>%
select(V1) %>%
mutate(V1 = str_replace_all(V1, "\\.", " "))
review_data2 <- review_data1 %>%
separate(V1, into = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10",
"11", "12", "13", "14", "15", "16", "17", "18",
"19", "20", "21", "22", "23", "24", "25", "26",
"27", "28", "29", "30", "31", "32", "33", "34",
"35", "36", "37", "38", "39", "40", "41", "42",
"43", "44", "45", "46", "47", "48", "49", "50"), sep = " ", extra = "drop")
View(review_data2)
# Split the data into training and testing data
allRows <- 1:nrow(letters)
letters <- read_csv("letters.csv")
setwd("../Data")
letters <- read_csv("letters.csv")
# Split the data into training and testing data
allRows <- 1:nrow(letters)
testRows <- sample(allRows, trunc(length(allRows) * 0.3))
letters_train <- letters[-testRows, ]
letters_test <- letters[testRows, ]
# Create the model
model <- svm(letter ~ ., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10, type = "C")
library(tidyverse)
library(e1071)
# Create the model
model <- svm(letter ~ ., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10, type = "C")
# Create the predictions
prediction <- predict(model, letters_test[, -1])
# Create the model
model <- svm(letter ~ ., data = letters_train, kernel = "radial", gamma = 0.001, cost = 10, type = "C")
# Create the predictions
prediction <- predict(model, letters_test[, -1])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = letters_test$letter)
# Accuracy
agreement <- prediction == vowel_test$Class
# Accuracy
agreement <- prediction == letters_test$letter
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
?svm
# Create the model
model <- svm(letter ~ ., data = letters_train, kernel = "radial", gamma = 0.01, cost = 1, type = "C")
# Create the predictions
prediction <- predict(model, letters_test[, -1])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = letters_test$letter)
# Accuracy
agreement <- prediction == letters_test$letter
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
# Create the model
model <- svm(letter ~ ., data = letters_train, kernel = "radial", gamma = 0.01, cost = 5, type = "C")
# Create the predictions
prediction <- predict(model, letters_test[, -1])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = letters_test$letter)
# Accuracy
agreement <- prediction == letters_test$letter
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
# Create the model
model <- svm(letter ~ ., data = letters_train, kernel = "radial", gamma = 0.001, cost = 5, type = "C")
# Create the predictions
prediction <- predict(model, letters_test[, -1])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = letters_test$letter)
# Accuracy
agreement <- prediction == letters_test$letter
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
# Create the model
model <- svm(letter ~ ., data = letters_train, kernel = "radial", gamma = 0.05, cost = 5, type = "C")
# Create the predictions
prediction <- predict(model, letters_test[, -1])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = letters_test$letter)
# Accuracy
agreement <- prediction == letters_test$letter
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
# Create the model
model <- svm(letter ~ ., data = letters_train, kernel = "radial", gamma = 0.005, cost = 8, type = "C")
# Create the predictions
prediction <- predict(model, letters_test[, -1])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = letters_test$letter)
# Accuracy
agreement <- prediction == letters_test$letter
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
model <- svm(letter ~ ., data = letters_train, kernel = "radial", gamma = 0.09, cost = 8, type = "C")
# Create the predictions
prediction <- predict(model, letters_test[, -1])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = letters_test$letter)
# Accuracy
agreement <- prediction == letters_test$letter
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
vowels <- read_csv("vowel.csv")
allRows <- 1:nrow(vowels)
testRows <- sample(allRows, trunc(length(allRows) * 0.3))
vowel_train <- vowels[-testRows, ]
vowel_test <- vowels[testRows, ]
model <- svm(Class ~ ., data = vowel_train, kernel = "radial", gamma = 0.001, cost = 10, type = "C")
# Create the predictions
prediction <- predict(model, vowel_test[, -13])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = vowel_test$Class)
# Accuracy
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
model <- svm(Class ~ ., data = vowel_train, kernel = "radial", gamma = 0.01, cost = 10, type = "C")
# Create the predictions
prediction <- predict(model, vowel_test[, -13])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = vowel_test$Class)
# Accuracy
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
model <- svm(Class ~ ., data = vowel_train, kernel = "radial", gamma = 0.01, cost = 5, type = "C")
# Create the predictions
prediction <- predict(model, vowel_test[, -13])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = vowel_test$Class)
# Accuracy
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
model <- svm(Class ~ ., data = vowel_train, kernel = "radial", gamma = 0.01, cost = 15, type = "C")
# Create the predictions
prediction <- predict(model, vowel_test[, -13])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = vowel_test$Class)
# Accuracy
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
model <- svm(Class ~ ., data = vowel_train, kernel = "radial", gamma = 0.08, cost = 15, type = "C")
# Create the predictions
prediction <- predict(model, vowel_test[, -13])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = vowel_test$Class)
# Accuracy
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
model <- svm(Class ~ ., data = vowel_train, kernel = "radial", gamma = 0.10, cost = 15, type = "C")
# Create the predictions
prediction <- predict(model, vowel_test[, -13])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = vowel_test$Class)
# Accuracy
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
model <- svm(Class ~ ., data = vowel_train, kernel = "radial", gamma = 0.08, cost = 20, type = "C")
# Create the predictions
prediction <- predict(model, vowel_test[, -13])
# Confusion matrix
confusion_matrix <- table(pred = prediction, true = vowel_test$Class)
# Accuracy
agreement <- prediction == vowel_test$Class
accuracy <- prop.table(table(agreement))
confusion_matrix
accuracy
library(tidyverse)
amazon <- read_csv("amazon_cells_labelled.txt", header=FALSE)
?read_csv
amazon <- read_csv("amazon_cells_labelled.txt", col_names=FALSE)
View(amazon)
length(amazon$X1)[1]
length(amazon$X1)[2]
length(amazon$X1)[3]
amazon <- amazon %>%
mutate(sentence = str_c(X1, " ", X2))
amazon <- read_csv("amazon_cells_labelled.txt", col_names=FALSE)
amazon <- amazon %>%
mutate(sentence = str_c(X1, " ", X2)) %>%
select(-c(X1, X2))
amazon <- read_csv("amazon_cells_labelled.txt", col_names=FALSE)
amazon <- amazon %>%
mutate(sentence = str_c(X1, " ", X2))
amazon <- read_csv("amazon_cells_labelled.txt", col_names=FALSE)
amazon <- amazon %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2)))
amazon <- read_csv("amazon_cells_labelled.txt", col_names=FALSE)
amazon <- amazon %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
select(-c(X1, X2))
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
View(imdb)
str_c(c("Hi", NA))
imdb <- imdb %>%
mutate(sentence = case_when(
str_c(X1, X2, X3, X4, X5, X6)))
imdb <- imdb %>%
mutate(sentence = case_when(
str_c(c(X1, X2, X3, X4, X5, X6))))
imdb <- imdb %>%
mutate(sentence1 = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, X2)))
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence1 = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2)))
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence1 = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
select(-X2)
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence1 = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
select(-c(X1, X2))
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
select(-c(X1, X2))
?str_c
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
is.na(X4)  ~  str_c(sentence, X3, sep = " "),
is.na(X5)  ~  str_c(sentence, X3, X4, sep = " "),
is.na(X6)  ~  str_c(sentence, X3, X4, X5, sep = " ")
TRUE       ~  str_c(sentence, X3, X4, X5, X6, sep = " ")))
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
is.na(X4)  ~  str_c(sentence, X3, sep = " ")))
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
select(-c(X1, X2))
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
is.na(X4)  ~  str_c(sentence, X3, sep = " "),
TRUE       ~  sentence))
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
select(-c(X1, X2))
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
TRUE  ~  str_c(sentence, " ", X3)))
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
select(-c(X1, X2))
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
TRUE  ~  str_c(sentence, " ", X3))) %>%
select(-X3)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X4)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X4)))
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
select(-c(X1, X2))
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
TRUE  ~  str_c(sentence, " ", X3))) %>%
select(-X3)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X4)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X4))) %>%
select(-X4)
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
TRUE  ~  str_c(sentence, " ", X3)))
imdb <- read_csv("imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
TRUE  ~  str_c(sentence, " ", X3))) %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
TRUE  ~  str_c(sentence, " ", X3))) %>%
mutate(sentence = case_when(
is.na(X4)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X4))) %>%
mutate(sentence = case_when(
is.na(X5)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X5))) %>%
mutate(sentence = case_when(
is.na(X6)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X6))) %>%
select(-c(X1, X2, X3, X4, X5, X6))
write_csv(amazon, path = "/Data/amazon.csv")
write_csv(amazon, path = "Data/amazon.csv")
imdb <- read_csv("Data/imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
TRUE  ~  str_c(sentence, " ", X3))) %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
TRUE  ~  str_c(sentence, " ", X3))) %>%
mutate(sentence = case_when(
is.na(X4)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X4))) %>%
mutate(sentence = case_when(
is.na(X5)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X5))) %>%
mutate(sentence = case_when(
is.na(X6)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X6))) %>%
select(-c(X1, X2, X3, X4, X5, X6))
write_csv(imdb, path = "Data/imdb.csv")
imdb <- read_csv("Data/imdb_labelled.txt", col_names=FALSE)
imdb <- read_csv("/Data/imdb_labelled.txt", col_names=FALSE)
imdb <- read_csv("Data/imdb_labelled.txt", col_names=FALSE)
imdb <- read_csv("./Data/imdb_labelled.txt", col_names=FALSE)
imdb <- read_csv("Data/imdb_labelled.txt", col_names=FALSE)
imdb <- imdb %>%
mutate(sentence = case_when(
is.na(X2)  ~  X1,
TRUE       ~  str_c(X1, " ", X2))) %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
TRUE  ~  str_c(sentence, " ", X3))) %>%
mutate(sentence = case_when(
is.na(X3)  ~  sentence,
TRUE  ~  str_c(sentence, " ", X3))) %>%
mutate(sentence = case_when(
is.na(X4)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X4))) %>%
mutate(sentence = case_when(
is.na(X5)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X5))) %>%
mutate(sentence = case_when(
is.na(X6)  ~  sentence,
TRUE       ~  str_c(sentence, " ", X6))) %>%
select(-c(X1, X2, X3, X4, X5, X6))
write_csv(imdb, path = "Data/imdb.csv")
View(imdb)
write_csv(imdb, path = "Data/imdb.csv")
write_csv(imdb, path = "Data/imdb.csv")
